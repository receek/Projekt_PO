
1. Fabularne przedstawienie projektu.

Celem projektu jest stworzenie urządzenia zarządzającego zestawem czujników pomiarowych i urządzeń peryferyjnych które mogą reagować na odczytane wartości. Nasze urządzenie będzie bazowało na mikrokontrolerze Arduino programowanym w językach C/C++ oraz zostanie wyposażone w zestaw przycisków i ekranu LCD dzięki czemu użytkownik ma możliwość zarządzać urządzeniem bezpośrednio będąc przy nim.
Paradygmat języka C++ pozwala na wprowadzenie modelu obiektowego, dzięki czemu jesteśmy w stanie sterować naszą aparaturą w sposób małoskomplikowany i przejrzysty na poziomie kodu. Dodatkowo do urządzenia jest podpięty moduł Ethernet, który pozwala na komunikację sieciową dzięki czemu użytkownik ma możliwość zarządzać urządzeniem zdalnie. Aplikacja okienkowa przeznaczona do zdalnej komunikacji została zaimplementowana w języku C# w Frameworku WPF.

Do Arduino zostały zaprojektowane i podłączone moduły:
-czujnik temperatury
-czujnik wilgotności
-czujnik odległości
-dioda RGB
-buzzer (głośnik)
-lampka (fotorezystor sterujący jasnością diody LED)

2. Instrukcja uruchomienia

Arduino:
W przesłanym kodzie zostały zdefiniowane wszytkie przewidziane rodzaje modułów, które zarządzają peryferiami. Aby poprawnie uruchomić mikrokontroler należy wedle potrzeby skonfigurować socket TCP adresem IP i numerem portu, skompilwoać projekt i załadowac do mikrokontrolera.

Aplikacja zdalna:

(~~~)

3.

Arduino:
Klasa Sterowanie - odpowiada za komunikację z użytkownikiem, zarówno za pomocą przycisków/LCD i przez aplikacją zdalną. W obiekcie tej klasy dołączamy moduły jakie pragniemy aby zostały obsługiowane przez mikrokontroler.

Klasa Przycisk - zarządza pojedyńczym przyciskiem podłączonym do styku Arduino

Klasa abstrakcyjna Modul - definiuje metody wirtualne, które powinny być zdefiniowane w kalsach pochodnych aby ułatwić zarządzanie peryferiami z poziomu klasy Sterowanie

Klasa Czujnik_temperatury - dziedziczy po Modul, obsługuje pojedyńczy czujnik temperatury

Klasa Czujnik_wilgotnosci - dziedziczy po Modul, obsługuje pojedyńczy czujnik wilgoci

Klasa Czujnik_odległosci - dziedziczy po Modul, obsługuje pojedyńczy czujnik odległości

Klasa Dioda_RGB - dziedziczy po Modul, zarządza diodą RGB, pozwala na zmianę koloru diody bezpośrednio przyciskami oraz zdalnie

Klasa Buzzer - dziedziczy po Modul, zarządza głośnikiem, pozwala na zmianę wartości i wydawanie dżwięku bezpośrednio przyciskami oraz zdalnie

Klasa Lampka - dziedziczy po Modul, zarządza diodą i fotorezystorem, dioda świeci gdy na czujnik nie będzie wystarczająco oświetlony, im mniej światła na niego pada tym jaśniej świeci dioda, diodę można włączyć/wyłączyć za pomocą przycisku lub zdalnie.

Aplikacja zdalna:

(~~~)

4. Diagramy klas będą załączone w plikach graficznych. Wygenerowane za pomoca programu Visual Paradigm

5. Wzorce projektowe

Arduino: Fasada

Aplikacja zdalna: (~~~)


